import numpy as np
import scipy.linalg as la
from numpy.linalg import matrix_rank
from numpy.linalg import matrix_power as mpow
import random

# Generate a random vector
def randomVector(maxNum,length):

    r = []
    for i in range(0,length):
        n = random.randint(0,maxNum)
        r.append(n)
    return r

# Generate a new vector which is colinear

def linearVector(v1,v2):

    n1 = random.randint(0,10)
    n2 = random.randint(0,10)
    r = []
    for i in range(0,len(v1)):
        d = v1[i]*n1+v2[i]*n2
        r.append(d)
        
    return r

#  s is an input matrix array 6*2
#  generate x is a random matrix 6*2
#  then r is the returned matrix 6*4 
#  r is generated by s and x

def randomSpace(s):
    x=np.random.rand(6,2)
    y=np.concatenate([s, x], axis=1)

    c1=np.random.rand(4,2)
    r1=y.dot(c1)

    r=np.concatenate([x, r1], axis=1)

    return r

#s=np.random.rand(6,2)
#print(randomSpace(s))
    
# Compute two intersection subspace s1 and s2
#  s1 (s2) is a matrix array 6*4
#  return results R is a matrix 6*2

def intersectionVectors(s1,s2):
 
    s2_sub = (-1)*s2[:6, :2]
    A=np.concatenate([s1, s2_sub], axis=1)
    #print(A)
    B1=s2[:, 3]
    r1 = np.linalg.solve(A,B1)
    v1=s1.dot(r1[:4,]).reshape(6,1)
    #print(v1)
   
   
    B2=s2[:, 2]
    r2 = np.linalg.solve(A,B2)
    v2=s1.dot(r2[:4,]).reshape(6,1)

    R=np.concatenate([v1,v2], axis=1)
    return R

    #N=np.concatenate([s2,v1,v2], axis=1)
    #print(N.shape)
    #print(matrix_rank(N))

# o1,o2,o3
# o4,o5,o6
# i1 = intersection(o1,o5) and (o2,o4)
# i2 = intersection(o1,o6) and (o3,o4)
# i3 = intersection(o2,o6) and (o3,o5)

def verifyPappus():
    o1=np.random.rand(6,2)
    o2o3=randomSpace(o1)
    o4=np.random.rand(6,2)
    o5o6=randomSpace(o1)

    N1=np.concatenate([o1,o5o6[:,:2]], axis=1)
    N2=np.concatenate([o2o3[:,:2],o4], axis=1)
    r1=intersectionVectors(N1,N2)

    N1=np.concatenate([o1,o5o6[:,2:4]], axis=1)
    N2=np.concatenate([o2o3[:,2:4],o4], axis=1)
    r2=intersectionVectors(N1,N2)

    N1=np.concatenate([o2o3[:,:2],o5o6[:,2:4]], axis=1)
    N2=np.concatenate([o2o3[:,2:4],o5o6[:,:2]], axis=1)
    r3=intersectionVectors(N1,N2)
    
    T=np.concatenate([r1,r2,r3], axis=1)
    print(T)
    print(matrix_rank(T))
    
verifyPappus()

def verifyDesauge():
    o=np.random.rand(6,2)
    A=randomSpace(o)
    B=randomSpace(o)
    N1=np.concatenate([A[:,:2],B[:,:2]], axis=1)
    N2=np.concatenate([A[:,2:4],B[:,2:4]], axis=1)
    r1=intersectionVectors(N1,N2)
    #print(r1)

    C=randomSpace(o)
    N1=np.concatenate([A[:,:2],C[:,:2]], axis=1)
    N2=np.concatenate([A[:,2:4],C[:,2:4]], axis=1)
    r2=intersectionVectors(N1,N2)
    #print(r2)

    N1=np.concatenate([B[:,:2],C[:,:2]], axis=1)
    N2=np.concatenate([B[:,2:4],C[:,2:4]], axis=1)
    r3=intersectionVectors(N1,N2)
    #print(r2)

    T=np.concatenate([r1,r2,r3], axis=1)
    #print(T)
    #print(matrix_rank(T))

    
#s1=np.random.rand(6,4)
#s2=np.random.rand(6,4)
#intersectionVectors(s1,s2)

verifyDesauge()

M = np.array([[3,4],[-1,5]])
print(M)
mpow(M,2)
la.inv(M)
print(la.det(M))
print(matrix_rank(M))

A = np.array([[4, 3, 2], [-2, 2, 3], [3, -5, 2]])
B = np.array([25, -12, -3])
X = np.linalg.inv(A).dot(B)

print(X)

A = np.array([[4, 3, 2], [-2, 2, 3], [3, -5, 2]])
B = np.array([25, -10, -4])
X2 = np.linalg.solve(A,B)

print(X2)


